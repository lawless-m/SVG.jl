var documenterSearchIndex = {"docs":
[{"location":"#SVG.jl","page":"SVG.jl","title":"SVG.jl","text":"","category":"section"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"Documentation for SVG.jl","category":"page"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"Style","category":"page"},{"location":"#SVG.Style","page":"SVG.jl","title":"SVG.Style","text":"Style\n\nProperties\n\nfill SVG fill string\nstrokecolor SVG stroke color string\nstrokewidth SVG stoke width string\n\nConstructor\n\nStyle(;fill=\"none\", strokecolor=\"black\", strokewidth=1)\n\nAll keyword arguments\n\n\n\n\n\n","category":"type"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"Svg","category":"page"},{"location":"#SVG.Svg","page":"SVG.jl","title":"SVG.Svg","text":"Svg\n\nSvg object\n\nProperties\n\nobjects - Vector of SVG objects\n\nConstructors\n\nCall either empty or with Vector of existing objects\n\nSvg()\nSvg(objs::SvgObject)\n\n\n\n\n\n","category":"type"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"Polyline","category":"page"},{"location":"#SVG.Polyline","page":"SVG.jl","title":"SVG.Polyline","text":"Polyline\n\nPolyline object\n\nProperties\n\nxs Vector of X coordinates, one per vertex\nys Vector of Y coordinates, one per vertex\n\nConstructors\n\nQuite the choice. \n\nConstruct with separate vectors or vectors of 2d points. \nSupply an optional transformation function fx, fy, fxy\nOr empty or with pre-allocated vectors of xs/ys\nSupply Style using kwarg\n\nPolyline(; style::Style=Style())\nPolyline(npoints::Int; style::Style=Style())\nPolyline(xs::Vector, ys::Vector; style::Style=Style()) \nPolyline(xs::Vector, ys::Vector, fx::Function, fy::Function; style::Style=Style()) \nPolyline(xys::Vector; style::Style=Style()) \nPolyline(xys::Vector, fxy::Function; style::Style=Style()) \nPolyline(xys::Vector, fx::Function, fy::Function; style::Style=Style())\n\n\n\n\n\n","category":"type"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"Circle","category":"page"},{"location":"#SVG.Circle","page":"SVG.jl","title":"SVG.Circle","text":"Circle\n\nCircle object\n\nProperties\n\nx, y, r - position and radius\nstyle = Style object\n\nRadius is invariant under the module supplied scaling operations\n\n\n\n\n\n","category":"type"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"Line","category":"page"},{"location":"#SVG.Line","page":"SVG.jl","title":"SVG.Line","text":"Line\n\nProperties\n\nx1, y1 x2, y2 - Endpoints of the line\nstyle - Style object for this line\n\nConstructor\n\nLine(x1, y1, x2, y2; style::Style=Style())\n\n\n\n\n\n","category":"type"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"write","category":"page"},{"location":"#Base.write","page":"SVG.jl","title":"Base.write","text":"write(fn::String, svg::Svg, width, height; viewbox=\"\", inhtml=false, digits=2, objwrite_fn=write_objs)\nwrite(io::IO, svg::Svg, width, height; viewbox=\"\", inhtml=false, digits=2, objwrite_fn=write_objs)\n\nwrite the Svg to a file or IO object. \n\nArguments\n\nfn - write to filename\nio - write to IO Object\nsvg - the Svg to write\nwidth, height - the width / height of the SVG object to supply\nviewbox - specify a particular viewbox: \"xmin ymin xmax ymax\"\ninhtml - Boolean flag whether to wrap the SVG in an HTML document for viewing in a browser.\ndigits - round all SVG Object co-ordinates to this many digits\nobjwrite_fn - a callback so the caller can modify the objects as they are written\n\n\n\n\n\n","category":"function"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"bounds","category":"page"},{"location":"#SVG.bounds","page":"SVG.jl","title":"SVG.bounds","text":"bounds(svg::Svg)\t\nbounds(svg::SvgObject)\n\nReturn the bounding box of the entire Svg or an individual SvgObject\n\nReturns\n\nNamedTuple(xmin, ymin, xmax, ymax)\n\n\n\n\n\n","category":"function"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"bounds_viewbox","category":"page"},{"location":"#SVG.bounds_viewbox","page":"SVG.jl","title":"SVG.bounds_viewbox","text":"bounds_viewbox(svg::Svg)\nbounds_viewbox(bounds::NamedTuple)\n\nCreate a viewbox string using either the Svg or a set of bounds\n\n\n\n\n\n","category":"function"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"scaled","category":"page"},{"location":"#SVG.scaled","page":"SVG.jl","title":"SVG.scaled","text":"scaled(s::Svg, w, h)\nscaled(s::Svg, fx, fy)\nscaled(s::SvgObject, fx, fy)\n\nScale either the whole Svg or individual Objects\n\ns either the whole Svg or individual objects\nfx, fy - functions to scale the positional co-ordinates\nw, h - scale the entire Svg up to the smallest of w / h and maintain aspect ratio\n\n\n\n\n\n","category":"function"},{"location":"","page":"SVG.jl","title":"SVG.jl","text":"points2circles","category":"page"},{"location":"#SVG.points2circles","page":"SVG.jl","title":"SVG.points2circles","text":"points2circles(xs, ys, r::Real)\npoints2circles(xys, r::Real)\npoints2circles(xs, ys, rs::Vector{Real})\npoints2circles(xys, rs::Vector{Real})\n\nHelper function to create a collection of points of a given radius to a collection of Circle objects\n\nArguments\n\nxs, ys Vectors or x/y corrdinates\nxys Vector of 2D points\nr Radius\nrs Vector of Radii\n\n\n\n\n\n","category":"function"}]
}
